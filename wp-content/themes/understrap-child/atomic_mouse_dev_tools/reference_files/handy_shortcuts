<?xml version="1.0" encoding="utf-8"?>

home    keystroke returns cursor to first empty space before text character

home x2 moves cursor to beginning of line

shift + end   selects from cursor to first white space at end of the line


snippet directory
C:\Users\Jamie Johnson\AppData\Roaming\Sublime Text 3\Packages\User


when using a "$" in a snippet you have to place a \ in front of it (referred to as "escaping") so if you want

$h1-font-size you snippet it as   \$h1-font-size



@include ms-respond(font-size, 2.75);



shift+ctrl+a 		selects first tag and contents
shift+ctrl+a  + arrow  takes you to the tag
shift+ctrl+a x2		select first tag, contents and closing tag

ctrl + b + 			toggle sidebar

	

alt + shift + f = reindent everything
ctrl + alt + a = align



// ctrl + enter in find/replace to target returns or \n in regex


//     add line break via peuso class - note: &:: configures psuedo element for sass nesting:
//     [class]
//     &::before{
//       content: "\A";
//       white-space: pre;
//     }


.class .class             [select all combinations of the two classes]
.class.class              [select only when the 2nd class is a direct child of the first]
selector + selector       [target all instances of the selector except the first (ex.  .class li + li)]
selector:not(:last-child) [target all instances of the selector except the last (ex.  .class:not(:last-child))]
.class:last-of-type       [target last instance of selector]


table selectors:

tbody tr:nth-child(odd) {
  background-color: $primary;
}

tbody tr:nth-child(even) {
  background-color: $tungsten;
}


tbody>tr>:nth-child(1){}



//     remove all newlines 
//     This will remove all newlines (\n+) followed by all whitespace (\s+) in the next line.
//     enable "Regular Expression" (circled in red)
//     enter \n\s+ in the search field, clear the replace field
//     press "Replace all"



sublime text search (following is regex, requiring enabling of "regular expressions")

\n  is regex for new line break

<div[^<>]*class="expt-text"[^<>]*>[\s\S]*?</div>     will find the tag, contents and closing tag of the class you specify



wildcard  [^<]+  as in   <style>[^<]+</style>  will find anything with the <style> tag    


<h2>[^<>]*</h2>     find all h2 tags and content

<<!--></!-->         find all comments


to leave the content in place and remove the surrounding div
Select Find -> Replace, and make sure the Regular Expression button is selected. In Find What:, put

(?s)<div class="some-class">(.*?)<\/div>
and in Replace With:

$1
Example here

(?s) makes . match newline characters as well. The capture group (.*?) matches all characters in a non-greedy fashion, so that the group ends at the first </div>. Otherwise, it would match all the way up to the last </div> (example). The replace value $1 is the first (and in this case only) matching group.









SNIPPETS
@onebreak - single bootstrap breakpoint mixin
@allbreaks - all bootstrap default breakpoints
@queries - all typical media queries
@makecol - bootstrap col-ready and create col-() mixins;
wpimg - wordpress img placeholder (html)
wpbgimg - wordpress background img placeholder (css)
break - insert br in span for conditional display
flexb - flex-basis: 0 0 1;
flex - flex display & direction




<!--=====================================
=            Bootstrap Grid           =
======================================-->

$grid-columns:      12;
$grid-gutter-width: 30px;

$grid-breakpoints: (
  // Extra small screen / phone
  xs: 0,
  // Small screen / phone
  sm: 576px,
  // Medium screen / tablet
  md: 768px,
  // Large screen / desktop
  lg: 992px,
  // Extra large screen / wide desktop
  xl: 1200px
);

$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px
);

<!--====  End of Section comment  ====-->

NPM
svgi to analyze svg files
svgo to minify/prettify svg


flywheel window fix:
close local
run following in cmd
del "%AppData%\Local by Flywheel\window-state.json"
start flywheel





container media queries - no set width
==========================================================================
.container {
    width: 100%;
    margin-right: auto;
    margin-left: auto;
}

@media (min-width: 576px) {
    .container {
        padding-right: 40px;
        padding-left: 40px;
    }
}

@media (min-width: 768px) {
    .container {
        padding-right: 40px;
        padding-left: 40px;
    }
}

@media (min-width: 992px) {
    .container {
        padding-right: 40px;
        padding-left: 40px;
    }
}

@media (min-width: 1200px) {
    .container {
        padding-right: 40px;
        padding-left: 40px;
    }
}

container media queries - WITH set width
==========================================================================


@media (min-width: 576px) {
    .container {
        width: 540px;
        max-width: 100%;
    }
}

@media (min-width: 768px) {
    .navbar .container {
        width: 720px;
        max-width: 100%;
    }

    .container {
        width: 540px;
        max-width: 100%;
    }
}

@media (min-width: 992px) {
    .container {
        width: 960px;
        max-width: 100%;
    }
}

@media (min-width: 1200px) {
    .container {
        width: 1140px;
        max-width: 100%;
    }
}

@media (min-width: 1400px) {
    .container {
        max-width: 1200px;
    }
}

@media (min-width: 1600px) {
    .container {
        max-width: 1400px;
    }
}

@media (min-width: 1900px) {
    .container {
        max-width: 1600px;
    }
}

!!!!!!!!!!!!the following plug in never worked !!!!!!!!!!!!!!!!
select tools/create new plugin and paste the following then create the new key binding

import sublime
import sublime_plugin
class MyLineSelectionCommand(sublime_plugin.TextCommand):
    def run(self, edit):
        view = self.view
        new_cursors = []
        cursors = view.sel()
        for cursor in cursors:
            new_cursors.append(view.line(cursor))
        cursors.clear()
        for cursor in new_cursors:
            cursors.add(cursor)

{ "keys": "ctrl+l", "command": "my_line_selection" }